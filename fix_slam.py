# evaluate the map generated by SLAM against the true map
import ast
import numpy as np
import json
import matplotlib.pyplot as plt
from pathlib import Path

def parse_groundtruth(fname : str) -> dict:
    with open(fname, 'r') as f:
        try:
            gt_dict = json.load(f)                   
        except ValueError as e:
            with open(fname, 'r') as f:
                gt_dict = ast.literal_eval(f.readline())   
        
        aruco_dict = {}
        for key in gt_dict:
            if key.startswith("aruco"):
                aruco_num = int(key.strip('aruco')[:-2])
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
            if key.startswith("redapple"):
                aruco_num = int(31)
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
            if key.startswith("greenapple"):
                aruco_num = int(32)
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
            if key.startswith("orange"):
                aruco_num = int(33)
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
            if key.startswith("mango"):
                aruco_num = int(34)
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
            if key.startswith("capsicum"):
                aruco_num = int(35)
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
    
    return aruco_dict

def parse_user_map(fname : str) -> dict:
    with open(fname, 'r') as f:
        usr_dict = ast.literal_eval(f.read())
        aruco_dict = {}
        for (i, tag) in enumerate(usr_dict["taglist"]):
            aruco_dict[tag] = np.reshape([usr_dict["map"][0][i],usr_dict["map"][1][i]], (2,1))
        robot_pose = usr_dict["robot"]
    return aruco_dict, robot_pose

def dict_to_vec(aruco_dict):
    aruco_vec = []
    taglist = []

    for key in aruco_dict:
        if key < 11:
            aruco_vec.append(aruco_dict[key])
            taglist.append(key)

    aruco_vec = np.hstack(aruco_vec)

    return taglist, aruco_vec

def match_aruco_points(aruco0 : dict, aruco1 : dict):
    points0 = []
    points1 = []
    keys = []
    for key in aruco0:
        if not key in aruco1:
            continue
        
        points0.append(aruco0[key])
        points1.append(aruco1[key])
        keys.append(key)
    return keys, np.hstack(points0), np.hstack(points1)

def solve_umeyama2d(points1, points2):
    # Solve the optimal transform such that
    # R(theta) * p1_i + t = p2_i

    assert(points1.shape[0] == 2)
    assert(points1.shape[0] == points2.shape[0])
    assert(points1.shape[1] == points2.shape[1])


    # Compute relevant variables
    num_points = points1.shape[1]
    mu1 = 1/num_points * np.reshape(np.sum(points1, axis=1),(2,-1))
    mu2 = 1/num_points * np.reshape(np.sum(points2, axis=1),(2,-1))
    sig1sq = 1/num_points * np.sum((points1 - mu1)**2.0)
    sig2sq = 1/num_points * np.sum((points2 - mu2)**2.0)
    Sig12 = 1/num_points * (points2-mu2) @ (points1-mu1).T

    # Use the SVD for the rotation
    U, d, Vh = np.linalg.svd(Sig12)
    S = np.eye(2)
    if np.linalg.det(Sig12) < 0:
        S[-1,-1] = -1
    
    # Return the result as an angle and a 2x1 vector
    R = U @ S @ Vh
    theta = np.arctan2(R[1,0],R[0,0])
    x = mu2 - R @ mu1

    return theta, x

def get_transformation(user_aruco, reference_aruco):

    user_vec = []
    reference_vec = []

    for key in reference_aruco:
        if key in user_aruco:
            user_vec.append(user_aruco[key])
            reference_vec.append(reference_aruco[key])
    
    theta, x = solve_umeyama2d(np.hstack(user_vec), np.hstack(reference_vec))
    return theta, x

def apply_transform(theta, x, points):
    # Apply an SE(2) transform to a set of 2D points
    assert(points.shape[0] == 2)
    
    c, s = np.cos(theta), np.sin(theta)
    R = np.array(((c, -s), (s, c)))

    points_transformed =  R @ points + x
    return points_transformed

def compute_rmse(points1, points2):
    # Compute the RMSE between two matched sets of 2D points.
    assert(points1.shape[0] == 2)
    assert(points1.shape[0] == points2.shape[0])
    assert(points1.shape[1] == points2.shape[1])
    num_points = points1.shape[1]
    residual = (points1-points2).ravel()
    MSE = 1.0/num_points * np.sum(residual**2)

    return np.sqrt(MSE)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser("Matching the estimated map and the true map")
    # parser.add_argument("groundtruth", type=str, help="The ground truth file name.", default="TRUEMAP.txt")
    # parser.add_argument("estimate", type=str, help="The estimate file name.", default="lab_output/slam.txt")
    args, _ = parser.parse_known_args()

    us_aruco, robot_pose = parse_user_map("lab_output/raw_slam.txt")

    gt = True

    # For rmse calc
    if gt:   
        gt_aruco = parse_groundtruth("TRUEMAP.txt")
        taglist, us_vec, gt_vec = match_aruco_points(us_aruco, gt_aruco)
    else:
        taglist, us_vec = dict_to_vec(us_aruco)
    
    idx = np.argsort(taglist)
    taglist = np.array(taglist)[idx]
    us_vec = us_vec[:, idx]
    
    if gt:
        gt_vec = gt_vec[:, idx] 

    theta = -robot_pose[2][0]
    x = np.array([robot_pose[0],[-robot_pose[1][0]]])

    us_vec_aligned = apply_transform(theta, x, us_vec)

    if gt:
        diff = gt_vec - us_vec_aligned
        rmse = compute_rmse(us_vec, gt_vec)
        rmse_aligned = compute_rmse(us_vec_aligned, gt_vec)
    
    taglist = taglist.astype(str)
    for i in range(len(taglist)):
        if taglist[i] == "31":
            taglist[i] = "redapple"
        elif taglist[i] == "32":
            taglist[i] = "greenapple"
        elif taglist[i] == "33":
            taglist[i] = "orange"
        elif taglist[i] == "34":
            taglist[i] = "mango"
        elif taglist[i] == "35":
            taglist[i] = "capsicum"

    # print()
    # print("The following parameters optimally transform the estimated points to the ground truth.")
    # print("Rotation Angle: {}".format(theta))
    # print("Translation Vector: ({}, {})".format(x[0,0], x[1,0]))
    
    print()
    print("Number of found markers: {}".format(len(taglist)))
    if gt:
        print("RMSE before alignment: {}".format(rmse))
        print("RMSE after alignment:  {}".format(rmse_aligned))
    
    # print()
    # print('%s %7s %9s %7s %11s %9s %7s' % ('Marker', 'Real x', 'Pred x', 'Δx', 'Real y', 'Pred y', 'Δy'))
    # print('-----------------------------------------------------------------')
    # for i in range(len(taglist)):
    #     print('%3s %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n' % (taglist[i], gt_vec[0][i], us_vec_aligned[0][i], diff[0][i], gt_vec[1][i], us_vec_aligned[1][i], diff[1][i]))
    
    ax = plt.gca()
    if gt:
        ax.scatter(gt_vec[0,:], gt_vec[1,:], marker='o', color='C0', s=100)
    ax.scatter(us_vec_aligned[0,:], us_vec_aligned[1,:], marker='x', color='C1', s=100)
    for i in range(len(taglist)):
        if gt:
            ax.text(gt_vec[0,i]+0.05, gt_vec[1,i]+0.05, taglist[i], color='C0', size=12)
        ax.text(us_vec_aligned[0,i]+0.05, us_vec_aligned[1,i]+0.05, taglist[i], color='C1', size=12)
    plt.title('Arena')
    plt.xlabel('X')
    plt.ylabel('Y')
    ax.set_xticks([-1.6, -1.2, -0.8, -0.4, 0, 0.4, 0.8, 1.2, 1.6])
    ax.set_yticks([-1.6, -1.2, -0.8, -0.4, 0, 0.4, 0.8, 1.2, 1.6])
    plt.legend(['Real','Pred'])
    plt.grid()
    plt.show()

    # Generate map
    slam_f = "lab_output/slam.txt"
    new_slam_dict = {"taglist":[int(i) for i in taglist.tolist()],
                    "map":us_vec_aligned.tolist(),
                    "robot":robot_pose}
    with open(slam_f, 'w') as map_f:
                json.dump(new_slam_dict, map_f, indent=2)

    base_dir = Path('./')
    with open(base_dir/'lab_output/slam.txt') as f:
        data_SLAM = f.read()
        dict_SLAM = json.loads(data_SLAM)
        taglist = dict_SLAM.get("taglist")
        coords = dict_SLAM.get("map")
        est_SLAM = {}

        for x in range(len(taglist)):
            est_SLAM["aruco"+str(taglist[x])+"_0"] = {'x':coords[0][x], 'y':coords[1][x]}
    
    with open(base_dir/'true_map.txt', 'w') as fo:
        json.dump(est_SLAM, fo, indent=4)